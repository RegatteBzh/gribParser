package grib

func reverse16(data uint16) uint16 {
	return (data%0x100)*0x100 + (data / 0x100)
}

func reverse32(data uint32) uint32 {
	x3 := data / 0x1000000
	x2 := (data - x3*0x1000000) / 0x10000
	x1 := (data - x3*0x1000000 - x2*0x10000) / 0x100
	x0 := data % 0x100
	return x0*0x1000000 + x1*0x10000 + x2*0x100 + x3
}

func reverse64(data uint64) uint64 {
	x7 := data / 0x100000000000000
	x6 := (data - x7*0x100000000000000) / 0x1000000000000
	x5 := (data - x7*0x100000000000000 - x6*0x1000000000000) / 0x10000000000
	x4 := (data - x7*0x100000000000000 - x6*0x1000000000000 - x5*0x10000000000) / 0x100000000
	x3 := (data - x7*0x100000000000000 - x6*0x1000000000000 - x5*0x10000000000 - x4*0x100000000) / 0x1000000
	x2 := (data - x7*0x100000000000000 - x6*0x1000000000000 - x5*0x10000000000 - x4*0x100000000 - x3*0x1000000) / 0x10000
	x1 := (data - x7*0x100000000000000 - x6*0x1000000000000 - x5*0x10000000000 - x4*0x100000000 - x3*0x1000000 - x2*0x10000) / 0x100
	x0 := data % 0x100
	return x0*0x100000000000000 + x1*0x1000000000000 + x2*0x10000000000 + x3*0x100000000 + x4*0x1000000 + x5*0x10000 + x6*0x100 + x7
}
